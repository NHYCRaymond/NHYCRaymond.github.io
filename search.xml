<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis source code analysis -- dict.c</title>
      <link href="/2023/10/23/RedisSourceCodeAnalysis/"/>
      <url>/2023/10/23/RedisSourceCodeAnalysis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis数据结构设计"><a href="#Redis数据结构设计" class="headerlink" title="Redis数据结构设计"></a>Redis数据结构设计</h1><p>Redis中的键值存储是基于字典数据结构实现的。在Redis的源代码中，dict.c文件包含了字典的实现代码，该字典用于存储键值对<br>dict.c 是 Redis 中负责实现字典（哈希表）数据结构的核心文件。字典是 Redis 中键值对的基本存储结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dict.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 哈希表结构 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    dictEntry **table; <span class="comment">/* 哈希表数组 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size; <span class="comment">/* 哈希表大小，即数组长度 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sizemask; <span class="comment">/* 哈希表大小掩码，用于计算索引值 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> used; <span class="comment">/* 已使用的节点数量 */</span></span><br><span class="line">&#125; dictht;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字典结构 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    dictType *type; <span class="comment">/* 数据类型特定函数集 */</span></span><br><span class="line">    <span class="type">void</span> *privdata; <span class="comment">/* 数据类型特定的私有数据 */</span></span><br><span class="line">    dictht ht[<span class="number">2</span>]; <span class="comment">/* 两个哈希表，用于实现渐进式 rehash */</span></span><br><span class="line">    <span class="type">long</span> rehashidx; <span class="comment">/* rehash 进度标识 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> iterators; <span class="comment">/* 正在运行的迭代器数量 */</span></span><br><span class="line">&#125; dict;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 哈希表节点结构 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> *key; <span class="comment">/* 键 */</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="type">void</span> *val;</span><br><span class="line">        <span class="type">uint64_t</span> u64;</span><br><span class="line">        <span class="type">int64_t</span> s64;</span><br><span class="line">    &#125; v; <span class="comment">/* 值，可以是指针、64 位无符号整数或 64 位有符号整数 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span> <span class="comment">/* 指向下一个哈希冲突的节点，形成链表 */</span></span><br><span class="line">&#125; dictEntry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 哈希函数特定的接口，比如哈希表的节点可以使用不同的哈希函数 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> (*hashFunction)(<span class="type">const</span> <span class="type">void</span> *key); <span class="comment">/* 哈希函数 */</span></span><br><span class="line">    <span class="type">void</span> *(*keyDup)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *key); <span class="comment">/* 复制键的函数 */</span></span><br><span class="line">    <span class="type">void</span> *(*valDup)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *obj); <span class="comment">/* 复制值的函数 */</span></span><br><span class="line">    <span class="type">int</span> (*keyCompare)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *key1, <span class="type">const</span> <span class="type">void</span> *key2); <span class="comment">/* 比较键的函数 */</span></span><br><span class="line">    <span class="type">void</span> (*keyDestructor)(<span class="type">void</span> *privdata, <span class="type">void</span> *key); <span class="comment">/* 销毁键的函数 */</span></span><br><span class="line">    <span class="type">void</span> (*valDestructor)(<span class="type">void</span> *privdata, <span class="type">void</span> *obj); <span class="comment">/* 销毁值的函数 */</span></span><br><span class="line">&#125; dictType;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码片段定义了 dict.c 文件中使用的数据结构，包括字典、哈希表、哈希表节点，以及哈希函数特定的接口。</p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p><strong>dictht 结构</strong></p><ul><li>dictht 结构表示哈希表，包括一个指向<strong>哈希表数组的指针table</strong>，<strong>哈希表大小 size</strong>，<strong>大小掩码 sizemask 用于计算索引</strong>，以及<strong>已使用的节点数量 used</strong></li></ul><p><strong>dict 结构</strong></p><ul><li>dict 结构代表整个字典。它包括一个数据类型特定<strong>函数集 dictType</strong>，指向特定数据类型的<strong>私有数据的指针 privdata</strong>，两个哈希表 <strong>ht[2] 用于实现渐进式 rehash，rehashidx 用于跟踪 rehash 进度</strong>，以及 <strong>iterators 记录正在运行的迭代器数量</strong></li></ul><p><strong>dictEntry 结构</strong></p><ul><li>dictEntry 结构表示哈希表中的一个节点，包括键 key、值 v，以及指向下一个哈希冲突的节点的指针 next。这里的值 v 是一个联合体，可以是指针、64 位无符号整数或 64 位有符号整数</li></ul><p><strong>dictType 结构</strong></p><ul><li>dictType 结构<strong>定义了哈希函数特定的接口</strong>，这些接口包括<strong>哈希函数</strong>、<strong>复制键和值的函数</strong>、<strong>比较键的函数</strong>，以及<strong>销毁键和值的函数</strong></li></ul><p>Redis的dict.c文件包含了用于实现字典（哈希表）数据结构的许多函数。以下是一些dict.c中的主要函数，它们用于操作字典、哈希表和哈希表节点。</p><ul><li><strong>dictCreate</strong>： 该函数用于创建一个新的字典。它接受一个指向数据类型特定函数集的指针，这个函数集定义了如何处理键和值。</li><li><strong>dictAdd</strong>： 用于向字典中添加一个键值对。如果键已存在，则函数会更新值。</li><li><strong>dictReplace</strong>： 与dictAdd类似，但仅在键不存在时添加。如果键已存在，它不会执行更新。</li><li><strong>dictDelete</strong>： 删除字典中的指定键值对。</li><li><strong>dictFind</strong>： 查找并返回字典中特定键对应的哈希表节点。</li><li><strong>dictGetKey 和 dictGetVal</strong>： 分别用于获取哈希表节点的键和值。</li><li><strong>dictResize</strong>： 当字典的负载因子超过指定阈值时，这个函数会对字典进行重新哈希，以增加哈希表的大小。</li><li><strong>dictRehash 和 dictRehashMilliseconds</strong>： 这两个函数用于在渐进式rehash期间，将键从旧哈希表rehash到新哈希表。</li><li><strong>dictRelease</strong>： 释放字典中的所有节点，并最终释放字典本身。</li><li><strong>dictGetIterator 和 dictReleaseIterator</strong>： 用于创建和释放迭代器，以遍历字典中的所有键值对。</li><li><strong>dictIteratorNext</strong>： 用于在迭代器上前进到下一个键值对。</li><li><strong>dictGenericDelete</strong>： 通用的删除函数，可以根据指定的标志来删除哈希表中的节点，包括是否释放键和值的内存。</li></ul><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>Redis的哈希表（hash table）在Redis 6.2.6中的接口设计主要包括对外提供的API函数，允许用户与哈希表进行交互。以下是Redis 6.2.6哈希表的一些核心接口和函数</p><p><strong>dictType 结构体</strong>： 这个结构体定义了数据类型特定函数集，包括哈希函数、键复制、值复制、键比较、键销毁和值销毁等函数。用户可以通过dictType结构体来自定义哈希表中键值对的操作方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> (*hashFunction)(<span class="type">const</span> <span class="type">void</span> *key);</span><br><span class="line">    <span class="type">void</span> *(*keyDup)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *key);</span><br><span class="line">    <span class="type">void</span> *(*valDup)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *obj);</span><br><span class="line">    <span class="type">int</span> (*keyCompare)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *key1, <span class="type">const</span> <span class="type">void</span> *key2);</span><br><span class="line">    <span class="type">void</span> (*keyDestructor)(<span class="type">void</span> *privdata, <span class="type">void</span> *key);</span><br><span class="line">    <span class="type">void</span> (*valDestructor)(<span class="type">void</span> *privdata, <span class="type">void</span> *obj);</span><br><span class="line">&#125; dictType;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>dict 结构体</strong> : 这个结构体代表整个哈希表，包括一个指向数据类型特定函数集的指针、指向特定数据类型的私有数据的指针、两个哈希表 ht[2] 用于实现渐进式 rehash、rehashidx 用于跟踪 rehash 进度、以及 iterators 用于记录正在运行的迭代器数量。<br><strong>dictEntry 结构体</strong> : 这个结构体表示哈希表中的一个节点，包括键 key、值 v，以及指向下一个哈希冲突的节点的指针 next。这里的值 v 是一个联合体，可以是指针、64 位无符号整数或 64 位有符号整数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> *key;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="type">void</span> *val;</span><br><span class="line">        <span class="type">uint64_t</span> u64;</span><br><span class="line">        <span class="type">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>字典API函数</strong> : Redis提供了一系列的API函数，允许用户创建、操作和管理哈希表。这些函数包括 dictCreate（创建哈希表）、dictAdd（添加键值对）、dictDelete（删除键值对）、dictFind（查找键值对）、dictGetKey（获取键）、dictGetVal（获取值）、dictGetIterator（创建迭代器）、dictIteratorNext（迭代器遍历）、dictReleaseIterator（释放迭代器）等</p><h3 id="哈希表节点"><a href="#哈希表节点" class="headerlink" title="哈希表节点"></a>哈希表节点</h3><p>Redis 6.2.6版本中的哈希表节点设计具有以下特点<br><strong>dictEntry 结构体</strong>： 在Redis中，哈希表的每个节点都是一个dictEntry结构体，代表一个键值对。该结构体具有以下字段：</p><p><strong>void *key</strong>：键，可以是任何类型的指针。<br><strong>union</strong>：值，Redis的哈希表支持多种不同的值类型，因此使用了联合体（union）来存储值。值可以是指针、64位无符号整数（uint64_t）或64位有符号整数（int64_t）。<br><strong>struct dictEntry *next</strong>：指向下一个哈希冲突的节点的指针，以形成链表。<br><strong>多值类型支持</strong>： dictEntry结构体中的值字段支持多种类型，这使得Redis的哈希表非常灵活，可以存储不同数据类型的值。<br><strong>泛型设计</strong>： Redis的哈希表节点的设计是泛型的，这意味着它可以存储不同类型的键值对。这种泛型设计是通过void *类型的键字段和值字段实现的，允许用户自定义键和值的数据类型。<br><strong>链表处理哈希冲突</strong>： Redis使用链表来处理哈希冲突。当多个键哈希到同一个桶时，它们将以链表的形式存储在同一个桶中。这使得Redis可以有效地处理多个键具有相同哈希值的情况。</p><blockquote><p>源码中的具体实现： 在Redis的源代码中，dictEntry结构体的具体定义和函数实现可以在dict.c文件中找到。这个文件包含了各种操作哈希表的函数，包括插入、查找、删除、迭代等。通过查看这些源码，可以深入了解dictEntry的设计和实现。</p></blockquote><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><p>在Redis 6.2.6中，哈希函数的具体实现和设计是基于MurmurHash哈希算法。MurmurHash是一种非加密性的哈希算法，被广泛用于哈希表、散列和数据校验等应用<br><strong>MurmurHash算法</strong>： Redis使用MurmurHash算法作为默认的哈希函数。MurmurHash是一种快速、高效的哈希算法，其设计目标是具有良好的分布性和低碰撞率。<br><strong>32位哈希值</strong>： Redis的MurmurHash实现生成32位的哈希值。这个32位哈希值可以用于确定键在哈希表中的位置。<br><strong>分桶和哈希槽</strong>： Redis的哈希表会将哈希值映射到一组桶（buckets）中，这些桶以哈希槽（slots）的形式组织。Redis会在桶中存储键值对，并通过哈希槽来分布这些桶。<br><strong>一致性哈希</strong>： Redis还使用了一致性哈希算法，它在分布式环境中特别有用。一致性哈希算法将键映射到哈希环（hash ring）上的节点，以便在节点的变化时，最小程度地影响数据的重新分布。<br><strong>哈希函数参数</strong>： 在Redis中，哈希函数通常使用两个参数，一个是键的名称，另一个是用于计算哈希的种子（seed）。这个种子在不同的哈希表操作中保持不变，以确保一致性哈希的准确性。</p><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2><p><img src="/" alt="dict.c"></p>]]></content>
      
      
      <categories>
          
          <category> middleware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> structure </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
